/******************************************************************** Class:  Gazelle  (extends Prey which extends Animal)Author:  Greg King  Date:  December 1, 2004 (last redesigned 12-03-2018)Models the behavior of Gazelles in the simulationDate			Modification12-01-2004	Main coding on this class started12-03-2004	Started making Gazelle specific movement (running away from 			predators)12-03-2018	Redesigned to use (row, col) rather than (x, y)10-10-2019  Some simple redesigns for version 3.1, changed toString to            use getSpecies method. Cleaned up comments.*********************************************************************/import java.awt.*;import java.util.*;public class SmartGazelle extends Gazelle{	private static double visualRange = 30.0;		/**	*	Constructor creates a SmartGazelle with Position 0,0.  Animal	*	has no cage in which to live.	*/	public SmartGazelle()	{		super();	}		/**	*	Constructor creates a SmartGazelle in a random empty spot in	*	the given cage.	*	@param cage  the cage in which SmartGazelle will be created.	*/	public SmartGazelle(Cage cage)	{		super(cage, Color.black);	}			/**	*	Constructor creates a SmartGazelle in a random empty spot in	*	the given cage with the specified Color 	*	@param cage  the cage in which SmartGazelle will be created.	*	@param color  the color of the SmartGazelle	*/	public SmartGazelle(Cage cage, Color color)	{		super(cage, color);	}		/**	*	Constructor creates a SmartGazelle in the given Position	*	the given cage with the specified Color.	*	@param cage  the cage in which SmartGazelle will be created.	*	@param color  the color of the SmartGazelle	*	@param pos	the position of the SmartGazelle	*/	public SmartGazelle(Cage cage, Color color, Position pos)	{		super(cage, color, pos);	}		/**	*	Method sets the SmartGazelle visual range to the given value.	*	@param range  sets the SmartGazelle visual range to 'range'	*/	public void setVisualRange(double range)	{		visualRange = range;	}			/**	*	Method overwrites the Act method in Animal.  SmartGazelle will 	*	attempt to move away from a Predator if it sees the Predator.	*/	public void act()	{		Animal closestPredator = findClosestPredator();				// In this case it sees a predator and tries to run away		if(closestPredator instanceof Predator)		{			int predatorRow = closestPredator.getPosition().getRow();			int predatorCol = closestPredator.getPosition().getCol();			int myRow = myPos.getRow();			int myCol = myPos.getCol();			Position newPos, oldPos = new Position(myRow, myCol);					if(predatorRow > myRow && myRow > 0)				myRow--;			else if (predatorRow < myRow && myRow < myCage.numRows()-1)				myRow++;			if(predatorCol > myCol && myCol > 0)				myCol--;			else if(predatorCol < myCol && myCol < myCage.numCols()-1)				myCol++;			newPos = new Position(myRow, myCol);						// Gazelle could not move away, so it moves as a 			// generic Animal, which means randomly			if(newPos.equals(oldPos))				super.act();			// Gazelle moves to new position which is empty			else if (myCage.isEmptyAt(newPos))			{				myPos = newPos;				myCage.moveAnimal(oldPos, this);			}			// Gazelle could not move to a new location because			// it was not empty, so it moves as a generic Animal			else			{				super.act();			}		}		else		{			super.act();		}	}		/**	*	Method returns the closest Predator to the SmartGazelle provided that 	*	Predator is also within the SmartGazelle's visual range, if no Predators	*	are seen the method returns a generic Animal.	*	@return	closest Predator the SmartGazelle can see	*/	public Animal findClosestPredator()	{		Animal closestPredator = new Animal(myCage);		double distanceToClosest = visualRange+.01;		// Distance set to just longer than a Rabbit can see				for(int r=0; r<myCage.numRows(); r++)		{			for(int c=0; c<myCage.numCols(); c++)			{				if(myCage.animalAt(r,c) instanceof Predator)				{					if(myPos.distanceTo(new Position(r,c)) < distanceToClosest)					{						closestPredator = myCage.animalAt(r,c);						distanceToClosest = myPos.distanceTo(new Position(r,c));					}				}			}		}			return closestPredator;	}		/**	*	Method returns the String form of the Animal's	*	species, in this case "Smart Gazelle"	*	@return	the String "Smart Gazelle"	*/	public String getSpecies()	{		return "Smart Gazelle";	}	}