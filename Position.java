/*************************************************************************** Class:  PositionAuthor:  Greg King  Date:  10-21=2004  (last redesigned 12-3-2018)This class is used to represent the coordinates of a position in a twodimensional grid.Date		Modification10-21-2004	Main coding12-03-2018	Redesigned to use (row, col) instead of (x, y)****************************************************************************/public class Position{	private int row;	private int col;			/**	*	Default constructor sets position to 0,0.	*/	public Position()	{		row = 0;		col = 0;	}		/**	*	Constructor sets position to be (row,col).	*	@param x  column coordinate of new Position	*	@param y  row coordinate of new Position	*/	public Position(int r, int c)	{		col = c;		row = r;	}		/**	*	Accessor method returns x coordinate of 	*	this position.	*	@return column coordinate of position	*/	public int getX()	{		return col;	}		/**	*	Accessor method returns column coordinate of 	*	this position.	*	@return column coordinate of position	*/	public int getCol()	{		return col;	}		/**	*	Accessor method returns row coordinate of 	*	this position.	*	@return row coordinate of position	*/	public int getY()	{		return row;	}		/**	*	Accessor method returns row coordinate of 	*	this position.	*	@return row coordinate of position	*/	public int getRow()	{		return row;	}		/**	*	Method sets the coordinates of this position	*	to be row, col.	*	@param y  new row coordinate of Position	*	@param x  new column coordinate of Position	*/	public void setPosition(int r, int c)	{		col = c;		row = r;	}		/**	*	Method returns the distance, in Cartesian units, between	*	this Position and the given Position.	*	@param pos	the target Position	*	@return	distance to the target Position in Cartesian units	*/	public double distanceTo(Position pos)	{		double distance = Math.sqrt((col-pos.getX())*(col-pos.getX())+							      (row-pos.getY())*(row-pos.getY()));		return distance;	}		/**	*	Method returns true if the given Position is equal to this	*	Position (meaning the coordinates are identical).	*	@param pos the Position to compare to 'this' Position	*	@return true if Positions are equal, false otherwise	*/	public boolean equals(Position pos)	{		if (pos.getX() == col && pos.getY() == row)			return true;		return false;	}		public String toString()	{		return ("(row: " + row + ", col: " + col +")");	}}